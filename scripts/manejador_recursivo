import os

def organizar_archivos_csv(directorio_base, diccionario_rutas=None, ruta_actual=None):
    """
    Función recursiva que busca archivos CSV y los organiza en su ubicación correspondiente.
    Solo usa el módulo os.
    
    Args:
        directorio_base (str): Ruta base del proyecto
        diccionario_rutas (dict): Diccionario para almacenar las rutas
        ruta_actual (str): Ruta actual en la recursión
    
    Returns:
        dict: Diccionario con las rutas de los archivos CSV organizados
    """
    
    # Inicializar el diccionario si es None
    if diccionario_rutas is None:
        diccionario_rutas = {}
    
    # Si no hay ruta actual, empezar desde el directorio base
    if ruta_actual is None:
        ruta_actual = directorio_base
    
    # Definir las ubicaciones esperadas para cada archivo CSV
    archivos_esperados = {
        'áfrica.csv': os.path.join(directorio_base, 'continentes', 'áfrica.csv'),
        'asia.csv': os.path.join(directorio_base, 'continentes', 'asia.csv'),
        'europa.csv': os.path.join(directorio_base, 'continentes', 'europa.csv'),
        'américa.csv': os.path.join(directorio_base, 'continentes', 'américa.csv'),
        'oceanía.csv': os.path.join(directorio_base, 'continentes', 'oceanía.csv'),
        'paises.csv': os.path.join(directorio_base, 'paises.csv'),
        'paises_cargados.csv': os.path.join(directorio_base, 'paises_cargados.csv')
    }
    
    try:
        # Listar todos los elementos en el directorio actual
        for elemento in os.listdir(ruta_actual):
            ruta_elemento = os.path.join(ruta_actual, elemento)
            
            # Si es un directorio, hacer llamada recursiva
            if os.path.isdir(ruta_elemento):
                organizar_archivos_csv(directorio_base, diccionario_rutas, ruta_elemento)
            
            # Si es un archivo y es uno de los CSV que buscamos
            elif os.path.isfile(ruta_elemento):
                nombre_archivo = elemento.lower()
                
                # Verificar si este archivo es uno de los que estamos buscando
                for archivo_esperado, ruta_destino in archivos_esperados.items():
                    if nombre_archivo == archivo_esperado.lower():
                        # Si el archivo no está en su ubicación correcta, moverlo
                        if ruta_elemento != ruta_destino:
                            # Crear el directorio destino si no existe
                            directorio_destino = os.path.dirname(ruta_destino)
                            if not os.path.exists(directorio_destino):
                                os.makedirs(directorio_destino)
                            
                            # Mover el archivo usando solo os
                            mover_archivo_con_os(ruta_elemento, ruta_destino)
                        
                        # Guardar la ruta en el diccionario
                        nombre_sin_extension = archivo_esperado.replace('.csv', '')
                        diccionario_rutas[nombre_sin_extension] = ruta_destino
                        break
    
    except PermissionError:
        print(f"Error de permisos al acceder a: {ruta_actual}")
    except Exception as e:
        print(f"Error al procesar {ruta_actual}: {e}")
    
    # Crear archivos que no se encontraron
    for archivo_esperado, ruta_destino in archivos_esperados.items():
        nombre_sin_extension = archivo_esperado.replace('.csv', '')
        
        # Si el archivo no está en el diccionario, significa que no se encontró
        if nombre_sin_extension not in diccionario_rutas:
            # Crear el directorio si no existe
            directorio_destino = os.path.dirname(ruta_destino)
            if not os.path.exists(directorio_destino):
                os.makedirs(directorio_destino)
            
            # Crear el archivo CSV vacío
            try:
                with open(ruta_destino, 'w', encoding='utf-8') as f:
                    f.write('')  # Archivo vacío
                print(f"✓ Archivo creado: {ruta_destino}")
                
                # Agregar al diccionario
                diccionario_rutas[nombre_sin_extension] = ruta_destino
                
            except Exception as e:
                print(f"✗ Error al crear archivo {ruta_destino}: {e}")
    
    return diccionario_rutas

def mover_archivo_con_os(ruta_origen, ruta_destino):
    """
    Mueve un archivo usando solo el módulo os.
    
    Args:
        ruta_origen (str): Ruta del archivo a mover
        ruta_destino (str): Ruta destino del archivo
    """
    try:
        # Leer el contenido del archivo origen
        with open(ruta_origen, 'rb') as archivo_origen:
            contenido = archivo_origen.read()
        
        # Escribir el contenido en el archivo destino
        with open(ruta_destino, 'wb') as archivo_destino:
            archivo_destino.write(contenido)
        
        # Eliminar el archivo origen
        os.remove(ruta_origen)
        
        print(f"✓ Archivo movido: {ruta_origen} -> {ruta_destino}")
        
    except Exception as e:
        print(f"✗ Error al mover archivo {ruta_origen}: {e}")

def buscar_csv_recursivamente(directorio, archivos_encontrados=None):
    """
    Función auxiliar para buscar archivos CSV recursivamente.
    
    Args:
        directorio (str): Directorio donde buscar
        archivos_encontrados (dict): Diccionario para almacenar archivos encontrados
    
    Returns:
        dict: Diccionario con archivos encontrados
    """
    if archivos_encontrados is None:
        archivos_encontrados = {}
    
    try:
        for elemento in os.listdir(directorio):
            ruta_completa = os.path.join(directorio, elemento)
            
            if os.path.isdir(ruta_completa):
                # Llamada recursiva para directorios
                buscar_csv_recursivamente(ruta_completa, archivos_encontrados)
            elif os.path.isfile(ruta_completa) and elemento.lower().endswith('.csv'):
                # Agregar archivo CSV al diccionario
                archivos_encontrados[elemento.lower()] = ruta_completa
                
    except PermissionError:
        print(f"Sin permisos para acceder a: {directorio}")
    
    return archivos_encontrados

def organizar_csv_completo(directorio_base):
    """
    Función principal que organiza todos los archivos CSV usando solo os.
    
    Args:
        directorio_base (str): Ruta base del proyecto
    
    Returns:
        dict: Diccionario con las rutas organizadas
    """
    print("Iniciando organización de archivos CSV (solo con os)...")
    
    # Verificar si existe el directorio base
    if not os.path.exists(directorio_base):
        print(f"✗ El directorio base '{directorio_base}' no existe. Creándolo...")
        os.makedirs(directorio_base)
    
    # Diccionario para almacenar las rutas finales
    rutas_organizadas = {}
    
    # Ubicaciones esperadas
    ubicaciones_esperadas = {
        'áfrica.csv': os.path.join(directorio_base, 'continentes', 'áfrica.csv'),
        'asia.csv': os.path.join(directorio_base, 'continentes', 'asia.csv'),
        'europa.csv': os.path.join(directorio_base, 'continentes', 'europa.csv'),
        'américa.csv': os.path.join(directorio_base, 'continentes', 'américa.csv'),
        'oceanía.csv': os.path.join(directorio_base, 'continentes', 'oceanía.csv'),
        'paises.csv': os.path.join(directorio_base, 'paises.csv'),
        'paises_cargados.csv': os.path.join(directorio_base, 'paises_cargados.csv')
    }
    
    # Buscar todos los archivos CSV recursivamente
    print("Buscando archivos CSV...")
    archivos_encontrados = buscar_csv_recursivamente(directorio_base)
    
    # Procesar cada archivo esperado
    for archivo_esperado, ruta_destino in ubicaciones_esperadas.items():
        nombre_sin_extension = archivo_esperado.replace('.csv', '')
        
        # Verificar si el archivo fue encontrado
        if archivo_esperado in archivos_encontrados:
            ruta_encontrada = archivos_encontrados[archivo_esperado]
            
            # Si no está en la ubicación correcta, moverlo
            if ruta_encontrada != ruta_destino:
                # Crear directorio destino si no existe
                directorio_destino = os.path.dirname(ruta_destino)
                if not os.path.exists(directorio_destino):
                    os.makedirs(directorio_destino)
                
                # Mover el archivo usando solo os
                mover_archivo_con_os(ruta_encontrada, ruta_destino)
            
            rutas_organizadas[nombre_sin_extension] = ruta_destino
            print(f"✓ Procesado: {archivo_esperado}")
            
        else:
            # Crear archivo si no existe
            directorio_destino = os.path.dirname(ruta_destino)
            if not os.path.exists(directorio_destino):
                os.makedirs(directorio_destino)
            
            try:
                with open(ruta_destino, 'w', encoding='utf-8') as f:
                    f.write('')  # Archivo CSV vacío
                rutas_organizadas[nombre_sin_extension] = ruta_destino
                print(f"✓ Creado: {ruta_destino}")
            except Exception as e:
                print(f"✗ Error al crear {ruta_destino}: {e}")
    
    print("✅ Organización completada!")
    return rutas_organizadas

# Función simple para uso rápido
def organizar_csv(directorio_base):
    """
    Función simplificada para organizar CSV.
    
    Args:
        directorio_base (str): Ruta base del proyecto
    
    Returns:
        dict: Diccionario con rutas organizadas
    """
    return organizar_archivos_csv(directorio_base)

# Ejemplo de uso
if __name__ == "__main__":
    # Ruta base de tu proyecto
    directorio_base = "TP Integrador"
    
    # Ejecutar la organización
    rutas_csv = organizar_csv_completo(directorio_base)
    
    # Mostrar resultados
    print("\n" + "="*60)
    print("RUTAS DE ARCHIVOS CSV ORGANIZADOS:")
    print("="*60)
    for nombre, ruta in sorted(rutas_csv.items()):
        print(f"  {nombre:20} -> {ruta}")